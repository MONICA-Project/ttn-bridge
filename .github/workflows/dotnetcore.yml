name: Build, Test, Publish and Dockerise TTN-Bridge

on: [push]

jobs:
  build:
    name: Build, pack and release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout parent project with dependencys
      uses: actions/checkout@v1
      with:
        repository: MONICA-Project/ttn-bridge-project
        ref: refs/heads/master
        submodules: true

    - name: Checkout last versions
      run: |
        chmod oug+x update.sh
        ./update.sh git
      working-directory: ../ttn-bridge-project

    - name: Install dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100

    - name: Build with dotnet
      run: dotnet build TTN-Bridge_Core.sln --configuration Release
      working-directory: ../ttn-bridge-project/TTN-Bridge

    - name: Create deb files
      if: success()
      run: |
        mkdir ../../../Builds 
        chmod oug+x make-deb-core.sh 
        ./make-deb-core.sh amd64 
        ./make-deb-core.sh armhf
        VMAJOR=$(grep -e "<Version>" ../TTN-Bridge_Core.csproj | cut -d'>' -f 2 | cut -d'<' -f 1 | cut -d'.' -f 1)
        VMINOR=$(grep -e "<Version>" ../TTN-Bridge_Core.csproj | cut -d'>' -f 2 | cut -d'<' -f 1 | cut -d'.' -f 2)
        VBUILD=$(grep -e "<Version>" ../TTN-Bridge_Core.csproj | cut -d'>' -f 2 | cut -d'<' -f 1 | cut -d'.' -f 3)
        TARGETFILE="ttnbridge_$VMAJOR.$VMINOR-$VBUILD.deb"
        echo "##[set-output name=debuilderfile;]$TARGETFILE"
        echo "##[set-output name=builddaterelease;]$(date +"%F_%H%M%S")"
      id: create_deb
      working-directory: ../ttn-bridge-project/TTN-Bridge/TTN-Bridge/dpkg

    - name: Create release
      if: success()
      id: nightly_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_deb.outputs.builddaterelease }}
        release_name: Nightly Release from master
        body: This is a nightly Release. It may be not working properly.
        draft: false
        prerelease: true
        
    - name: Upload Release Asset amd64
      if: success()
      id: upload-release-asset-amd64
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.nightly_release.outputs.upload_url }}
        asset_path: ../ttn-bridge-project/Builds/amd64-${{ steps.create_deb.outputs.debuilderfile }}
        asset_name: amd64-${{ steps.create_deb.outputs.debuilderfile }}
        asset_content_type: application/x-deb
        
    - name: Upload Release Asset armhf
      if: success()
      id: upload-release-asset-armhf
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.nightly_release.outputs.upload_url }}
        asset_path: ../ttn-bridge-project/Builds/armhf-${{ steps.create_deb.outputs.debuilderfile }}
        asset_name: armhf-${{ steps.create_deb.outputs.debuilderfile }}
        asset_content_type: application/x-deb

  docker:
    name: Build and push dockerfile
    runs-on: ubuntu-latest
    steps:
    - name: Checkout parent project with dependencys
      uses: actions/checkout@v1
      with:
        repository: MONICA-Project/ttn-bridge-project
        submodules: true

    - name: Checkout last versions
      run: |
        chmod oug+x update.sh
        ./update.sh git
      working-directory: ../ttn-bridge-project
      
    - name: Docker-Compose build
      run: docker-compose build
      working-directory: ../ttn-bridge-project

    - name: Docker-Compose Publish
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin ${INPUT_REGISTRY}
        docker push monicaproject/ttn-bridge:latest
        docker push monicaproject/ttn-bridge:$(date +"%F_%H%M%S")
      working-directory: ../ttn-bridge-project